// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: catalog_statements.proto

package ast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateGraphStatement struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IfNotExists   bool                   `protobuf:"varint,1,opt,name=if_not_exists,json=ifNotExists"`
	xxx_hidden_ReplaceGraph  bool                   `protobuf:"varint,2,opt,name=replace_graph,json=replaceGraph"`
	xxx_hidden_ParentAndName *CatalogParentAndName  `protobuf:"bytes,3,opt,name=parent_and_name,json=parentAndName"`
	xxx_hidden_GraphType     *GraphType             `protobuf:"bytes,4,opt,name=graph_type,json=graphType"`
	xxx_hidden_GraphSource   *GraphExpression       `protobuf:"bytes,5,opt,name=graph_source,json=graphSource"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateGraphStatement) Reset() {
	*x = CreateGraphStatement{}
	mi := &file_catalog_statements_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGraphStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGraphStatement) ProtoMessage() {}

func (x *CreateGraphStatement) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_statements_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateGraphStatement) GetIfNotExists() bool {
	if x != nil {
		return x.xxx_hidden_IfNotExists
	}
	return false
}

func (x *CreateGraphStatement) GetReplaceGraph() bool {
	if x != nil {
		return x.xxx_hidden_ReplaceGraph
	}
	return false
}

func (x *CreateGraphStatement) GetParentAndName() *CatalogParentAndName {
	if x != nil {
		return x.xxx_hidden_ParentAndName
	}
	return nil
}

func (x *CreateGraphStatement) GetGraphType() *GraphType {
	if x != nil {
		return x.xxx_hidden_GraphType
	}
	return nil
}

func (x *CreateGraphStatement) GetGraphSource() *GraphExpression {
	if x != nil {
		return x.xxx_hidden_GraphSource
	}
	return nil
}

func (x *CreateGraphStatement) SetIfNotExists(v bool) {
	x.xxx_hidden_IfNotExists = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CreateGraphStatement) SetReplaceGraph(v bool) {
	x.xxx_hidden_ReplaceGraph = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CreateGraphStatement) SetParentAndName(v *CatalogParentAndName) {
	x.xxx_hidden_ParentAndName = v
}

func (x *CreateGraphStatement) SetGraphType(v *GraphType) {
	x.xxx_hidden_GraphType = v
}

func (x *CreateGraphStatement) SetGraphSource(v *GraphExpression) {
	x.xxx_hidden_GraphSource = v
}

func (x *CreateGraphStatement) HasIfNotExists() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateGraphStatement) HasReplaceGraph() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateGraphStatement) HasParentAndName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ParentAndName != nil
}

func (x *CreateGraphStatement) HasGraphType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GraphType != nil
}

func (x *CreateGraphStatement) HasGraphSource() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GraphSource != nil
}

func (x *CreateGraphStatement) ClearIfNotExists() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IfNotExists = false
}

func (x *CreateGraphStatement) ClearReplaceGraph() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ReplaceGraph = false
}

func (x *CreateGraphStatement) ClearParentAndName() {
	x.xxx_hidden_ParentAndName = nil
}

func (x *CreateGraphStatement) ClearGraphType() {
	x.xxx_hidden_GraphType = nil
}

func (x *CreateGraphStatement) ClearGraphSource() {
	x.xxx_hidden_GraphSource = nil
}

type CreateGraphStatement_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IfNotExists   *bool
	ReplaceGraph  *bool
	ParentAndName *CatalogParentAndName
	GraphType     *GraphType
	GraphSource   *GraphExpression
}

func (b0 CreateGraphStatement_builder) Build() *CreateGraphStatement {
	m0 := &CreateGraphStatement{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IfNotExists != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_IfNotExists = *b.IfNotExists
	}
	if b.ReplaceGraph != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_ReplaceGraph = *b.ReplaceGraph
	}
	x.xxx_hidden_ParentAndName = b.ParentAndName
	x.xxx_hidden_GraphType = b.GraphType
	x.xxx_hidden_GraphSource = b.GraphSource
	return m0
}

type DropGraphStatement struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IfExists      bool                   `protobuf:"varint,1,opt,name=if_exists,json=ifExists"`
	xxx_hidden_ParentAndName *CatalogParentAndName  `protobuf:"bytes,2,opt,name=parent_and_name,json=parentAndName"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DropGraphStatement) Reset() {
	*x = DropGraphStatement{}
	mi := &file_catalog_statements_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropGraphStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropGraphStatement) ProtoMessage() {}

func (x *DropGraphStatement) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_statements_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DropGraphStatement) GetIfExists() bool {
	if x != nil {
		return x.xxx_hidden_IfExists
	}
	return false
}

func (x *DropGraphStatement) GetParentAndName() *CatalogParentAndName {
	if x != nil {
		return x.xxx_hidden_ParentAndName
	}
	return nil
}

func (x *DropGraphStatement) SetIfExists(v bool) {
	x.xxx_hidden_IfExists = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DropGraphStatement) SetParentAndName(v *CatalogParentAndName) {
	x.xxx_hidden_ParentAndName = v
}

func (x *DropGraphStatement) HasIfExists() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DropGraphStatement) HasParentAndName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ParentAndName != nil
}

func (x *DropGraphStatement) ClearIfExists() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IfExists = false
}

func (x *DropGraphStatement) ClearParentAndName() {
	x.xxx_hidden_ParentAndName = nil
}

type DropGraphStatement_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IfExists      *bool
	ParentAndName *CatalogParentAndName
}

func (b0 DropGraphStatement_builder) Build() *DropGraphStatement {
	m0 := &DropGraphStatement{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IfExists != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_IfExists = *b.IfExists
	}
	x.xxx_hidden_ParentAndName = b.ParentAndName
	return m0
}

var File_catalog_statements_proto protoreflect.FileDescriptor

var file_catalog_statements_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x73, 0x74, 0x1a,
	0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x02, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x41, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x44, 0x72, 0x6f, 0x70, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x10, 0x5a, 0x04, 0x2f, 0x61, 0x73, 0x74, 0x92, 0x03, 0x07, 0xd2, 0x3e, 0x02, 0x10,
	0x03, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_catalog_statements_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_catalog_statements_proto_goTypes = []any{
	(*CreateGraphStatement)(nil), // 0: ast.CreateGraphStatement
	(*DropGraphStatement)(nil),   // 1: ast.DropGraphStatement
	(*CatalogParentAndName)(nil), // 2: ast.CatalogParentAndName
	(*GraphType)(nil),            // 3: ast.GraphType
	(*GraphExpression)(nil),      // 4: ast.GraphExpression
}
var file_catalog_statements_proto_depIdxs = []int32{
	2, // 0: ast.CreateGraphStatement.parent_and_name:type_name -> ast.CatalogParentAndName
	3, // 1: ast.CreateGraphStatement.graph_type:type_name -> ast.GraphType
	4, // 2: ast.CreateGraphStatement.graph_source:type_name -> ast.GraphExpression
	2, // 3: ast.DropGraphStatement.parent_and_name:type_name -> ast.CatalogParentAndName
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_catalog_statements_proto_init() }
func file_catalog_statements_proto_init() {
	if File_catalog_statements_proto != nil {
		return
	}
	file_catalog_proto_init()
	file_graph_type_proto_init()
	file_graph_expression_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_catalog_statements_proto_rawDesc), len(file_catalog_statements_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_catalog_statements_proto_goTypes,
		DependencyIndexes: file_catalog_statements_proto_depIdxs,
		MessageInfos:      file_catalog_statements_proto_msgTypes,
	}.Build()
	File_catalog_statements_proto = out.File
	file_catalog_statements_proto_goTypes = nil
	file_catalog_statements_proto_depIdxs = nil
}
