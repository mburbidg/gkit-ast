// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: graph_reference.proto

package ast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GraphReference struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Which isGraphReference_Which `protobuf_oneof:"which"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GraphReference) Reset() {
	*x = GraphReference{}
	mi := &file_graph_reference_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphReference) ProtoMessage() {}

func (x *GraphReference) ProtoReflect() protoreflect.Message {
	mi := &file_graph_reference_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GraphReference) GetParentAndName() *CatalogParentAndName {
	if x != nil {
		if x, ok := x.xxx_hidden_Which.(*graphReference_ParentAndName); ok {
			return x.ParentAndName
		}
	}
	return nil
}

func (x *GraphReference) GetDelimitedGraphName() *Identifier {
	if x != nil {
		if x, ok := x.xxx_hidden_Which.(*graphReference_DelimitedGraphName); ok {
			return x.DelimitedGraphName
		}
	}
	return nil
}

func (x *GraphReference) GetHomeGraph() *HomeGraph {
	if x != nil {
		if x, ok := x.xxx_hidden_Which.(*graphReference_HomeGraph); ok {
			return x.HomeGraph
		}
	}
	return nil
}

func (x *GraphReference) GetReferenceParameterSpecification() *ReferenceParameterSpecification {
	if x != nil {
		if x, ok := x.xxx_hidden_Which.(*graphReference_ReferenceParameterSpecification); ok {
			return x.ReferenceParameterSpecification
		}
	}
	return nil
}

func (x *GraphReference) SetParentAndName(v *CatalogParentAndName) {
	if v == nil {
		x.xxx_hidden_Which = nil
		return
	}
	x.xxx_hidden_Which = &graphReference_ParentAndName{v}
}

func (x *GraphReference) SetDelimitedGraphName(v *Identifier) {
	if v == nil {
		x.xxx_hidden_Which = nil
		return
	}
	x.xxx_hidden_Which = &graphReference_DelimitedGraphName{v}
}

func (x *GraphReference) SetHomeGraph(v *HomeGraph) {
	if v == nil {
		x.xxx_hidden_Which = nil
		return
	}
	x.xxx_hidden_Which = &graphReference_HomeGraph{v}
}

func (x *GraphReference) SetReferenceParameterSpecification(v *ReferenceParameterSpecification) {
	if v == nil {
		x.xxx_hidden_Which = nil
		return
	}
	x.xxx_hidden_Which = &graphReference_ReferenceParameterSpecification{v}
}

func (x *GraphReference) HasWhich() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Which != nil
}

func (x *GraphReference) HasParentAndName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Which.(*graphReference_ParentAndName)
	return ok
}

func (x *GraphReference) HasDelimitedGraphName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Which.(*graphReference_DelimitedGraphName)
	return ok
}

func (x *GraphReference) HasHomeGraph() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Which.(*graphReference_HomeGraph)
	return ok
}

func (x *GraphReference) HasReferenceParameterSpecification() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Which.(*graphReference_ReferenceParameterSpecification)
	return ok
}

func (x *GraphReference) ClearWhich() {
	x.xxx_hidden_Which = nil
}

func (x *GraphReference) ClearParentAndName() {
	if _, ok := x.xxx_hidden_Which.(*graphReference_ParentAndName); ok {
		x.xxx_hidden_Which = nil
	}
}

func (x *GraphReference) ClearDelimitedGraphName() {
	if _, ok := x.xxx_hidden_Which.(*graphReference_DelimitedGraphName); ok {
		x.xxx_hidden_Which = nil
	}
}

func (x *GraphReference) ClearHomeGraph() {
	if _, ok := x.xxx_hidden_Which.(*graphReference_HomeGraph); ok {
		x.xxx_hidden_Which = nil
	}
}

func (x *GraphReference) ClearReferenceParameterSpecification() {
	if _, ok := x.xxx_hidden_Which.(*graphReference_ReferenceParameterSpecification); ok {
		x.xxx_hidden_Which = nil
	}
}

const GraphReference_Which_not_set_case case_GraphReference_Which = 0
const GraphReference_ParentAndName_case case_GraphReference_Which = 1
const GraphReference_DelimitedGraphName_case case_GraphReference_Which = 2
const GraphReference_HomeGraph_case case_GraphReference_Which = 3
const GraphReference_ReferenceParameterSpecification_case case_GraphReference_Which = 4

func (x *GraphReference) WhichWhich() case_GraphReference_Which {
	if x == nil {
		return GraphReference_Which_not_set_case
	}
	switch x.xxx_hidden_Which.(type) {
	case *graphReference_ParentAndName:
		return GraphReference_ParentAndName_case
	case *graphReference_DelimitedGraphName:
		return GraphReference_DelimitedGraphName_case
	case *graphReference_HomeGraph:
		return GraphReference_HomeGraph_case
	case *graphReference_ReferenceParameterSpecification:
		return GraphReference_ReferenceParameterSpecification_case
	default:
		return GraphReference_Which_not_set_case
	}
}

type GraphReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Which:
	ParentAndName                   *CatalogParentAndName
	DelimitedGraphName              *Identifier
	HomeGraph                       *HomeGraph
	ReferenceParameterSpecification *ReferenceParameterSpecification
	// -- end of xxx_hidden_Which
}

func (b0 GraphReference_builder) Build() *GraphReference {
	m0 := &GraphReference{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ParentAndName != nil {
		x.xxx_hidden_Which = &graphReference_ParentAndName{b.ParentAndName}
	}
	if b.DelimitedGraphName != nil {
		x.xxx_hidden_Which = &graphReference_DelimitedGraphName{b.DelimitedGraphName}
	}
	if b.HomeGraph != nil {
		x.xxx_hidden_Which = &graphReference_HomeGraph{b.HomeGraph}
	}
	if b.ReferenceParameterSpecification != nil {
		x.xxx_hidden_Which = &graphReference_ReferenceParameterSpecification{b.ReferenceParameterSpecification}
	}
	return m0
}

type case_GraphReference_Which protoreflect.FieldNumber

func (x case_GraphReference_Which) String() string {
	md := file_graph_reference_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isGraphReference_Which interface {
	isGraphReference_Which()
}

type graphReference_ParentAndName struct {
	ParentAndName *CatalogParentAndName `protobuf:"bytes,1,opt,name=parent_and_name,json=parentAndName,oneof"`
}

type graphReference_DelimitedGraphName struct {
	DelimitedGraphName *Identifier `protobuf:"bytes,2,opt,name=delimited_graph_name,json=delimitedGraphName,oneof"`
}

type graphReference_HomeGraph struct {
	HomeGraph *HomeGraph `protobuf:"bytes,3,opt,name=home_graph,json=homeGraph,oneof"`
}

type graphReference_ReferenceParameterSpecification struct {
	ReferenceParameterSpecification *ReferenceParameterSpecification `protobuf:"bytes,4,opt,name=reference_parameter_specification,json=referenceParameterSpecification,oneof"`
}

func (*graphReference_ParentAndName) isGraphReference_Which() {}

func (*graphReference_DelimitedGraphName) isGraphReference_Which() {}

func (*graphReference_HomeGraph) isGraphReference_Which() {}

func (*graphReference_ReferenceParameterSpecification) isGraphReference_Which() {}

type HomeGraph struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HomeGraph) Reset() {
	*x = HomeGraph{}
	mi := &file_graph_reference_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HomeGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeGraph) ProtoMessage() {}

func (x *HomeGraph) ProtoReflect() protoreflect.Message {
	mi := &file_graph_reference_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type HomeGraph_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 HomeGraph_builder) Build() *HomeGraph {
	m0 := &HomeGraph{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

var File_graph_reference_proto protoreflect.FileDescriptor

var file_graph_reference_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x73, 0x74, 0x1a, 0x21, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8,
	0x02, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x72, 0x0a, 0x21,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x63, 0x68, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x6f, 0x6d,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x42, 0x10, 0x5a, 0x04, 0x2f, 0x61, 0x73, 0x74, 0x92, 0x03,
	0x07, 0xd2, 0x3e, 0x02, 0x10, 0x03, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_graph_reference_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_graph_reference_proto_goTypes = []any{
	(*GraphReference)(nil),                  // 0: ast.GraphReference
	(*HomeGraph)(nil),                       // 1: ast.HomeGraph
	(*CatalogParentAndName)(nil),            // 2: ast.CatalogParentAndName
	(*Identifier)(nil),                      // 3: ast.Identifier
	(*ReferenceParameterSpecification)(nil), // 4: ast.ReferenceParameterSpecification
}
var file_graph_reference_proto_depIdxs = []int32{
	2, // 0: ast.GraphReference.parent_and_name:type_name -> ast.CatalogParentAndName
	3, // 1: ast.GraphReference.delimited_graph_name:type_name -> ast.Identifier
	1, // 2: ast.GraphReference.home_graph:type_name -> ast.HomeGraph
	4, // 3: ast.GraphReference.reference_parameter_specification:type_name -> ast.ReferenceParameterSpecification
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_graph_reference_proto_init() }
func file_graph_reference_proto_init() {
	if File_graph_reference_proto != nil {
		return
	}
	file_catalog_proto_init()
	file_literals_proto_init()
	file_graph_reference_proto_msgTypes[0].OneofWrappers = []any{
		(*graphReference_ParentAndName)(nil),
		(*graphReference_DelimitedGraphName)(nil),
		(*graphReference_HomeGraph)(nil),
		(*graphReference_ReferenceParameterSpecification)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_graph_reference_proto_rawDesc), len(file_graph_reference_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_graph_reference_proto_goTypes,
		DependencyIndexes: file_graph_reference_proto_depIdxs,
		MessageInfos:      file_graph_reference_proto_msgTypes,
	}.Build()
	File_graph_reference_proto = out.File
	file_graph_reference_proto_goTypes = nil
	file_graph_reference_proto_depIdxs = nil
}
