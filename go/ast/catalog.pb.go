// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: catalog.proto

package ast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CatalogParentAndNameType int32

const (
	CatalogParentAndNameType_GRAPH      CatalogParentAndNameType = 0
	CatalogParentAndNameType_GRAPH_TYPE CatalogParentAndNameType = 1
)

// Enum value maps for CatalogParentAndNameType.
var (
	CatalogParentAndNameType_name = map[int32]string{
		0: "GRAPH",
		1: "GRAPH_TYPE",
	}
	CatalogParentAndNameType_value = map[string]int32{
		"GRAPH":      0,
		"GRAPH_TYPE": 1,
	}
)

func (x CatalogParentAndNameType) Enum() *CatalogParentAndNameType {
	p := new(CatalogParentAndNameType)
	*p = x
	return p
}

func (x CatalogParentAndNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogParentAndNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_catalog_proto_enumTypes[0].Descriptor()
}

func (CatalogParentAndNameType) Type() protoreflect.EnumType {
	return &file_catalog_proto_enumTypes[0]
}

func (x CatalogParentAndNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type CatalogParentAndName struct {
	state             protoimpl.MessageState        `protogen:"opaque.v1"`
	xxx_hidden_Type   CatalogParentAndNameType      `protobuf:"varint,1,opt,name=type,enum=ast.CatalogParentAndNameType"`
	xxx_hidden_Parent *CatalogObjectParentReference `protobuf:"bytes,2,opt,name=parent"`
	xxx_hidden_Name   *Identifier                   `protobuf:"bytes,3,opt,name=name"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CatalogParentAndName) Reset() {
	*x = CatalogParentAndName{}
	mi := &file_catalog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatalogParentAndName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogParentAndName) ProtoMessage() {}

func (x *CatalogParentAndName) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CatalogParentAndName) GetType() CatalogParentAndNameType {
	if x != nil {
		return x.xxx_hidden_Type
	}
	return CatalogParentAndNameType_GRAPH
}

func (x *CatalogParentAndName) GetParent() *CatalogObjectParentReference {
	if x != nil {
		return x.xxx_hidden_Parent
	}
	return nil
}

func (x *CatalogParentAndName) GetName() *Identifier {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return nil
}

func (x *CatalogParentAndName) SetType(v CatalogParentAndNameType) {
	x.xxx_hidden_Type = v
}

func (x *CatalogParentAndName) SetParent(v *CatalogObjectParentReference) {
	x.xxx_hidden_Parent = v
}

func (x *CatalogParentAndName) SetName(v *Identifier) {
	x.xxx_hidden_Name = v
}

func (x *CatalogParentAndName) HasParent() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Parent != nil
}

func (x *CatalogParentAndName) HasName() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Name != nil
}

func (x *CatalogParentAndName) ClearParent() {
	x.xxx_hidden_Parent = nil
}

func (x *CatalogParentAndName) ClearName() {
	x.xxx_hidden_Name = nil
}

type CatalogParentAndName_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Type   CatalogParentAndNameType
	Parent *CatalogObjectParentReference
	Name   *Identifier
}

func (b0 CatalogParentAndName_builder) Build() *CatalogParentAndName {
	m0 := &CatalogParentAndName{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Type = b.Type
	x.xxx_hidden_Parent = b.Parent
	x.xxx_hidden_Name = b.Name
	return m0
}

type CatalogObjectParentReference struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SchemaReference *SchemaReference       `protobuf:"bytes,1,opt,name=schemaReference"`
	xxx_hidden_ObjectName      *[]*Identifier         `protobuf:"bytes,2,rep,name=object_name,json=objectName"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CatalogObjectParentReference) Reset() {
	*x = CatalogObjectParentReference{}
	mi := &file_catalog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatalogObjectParentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogObjectParentReference) ProtoMessage() {}

func (x *CatalogObjectParentReference) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CatalogObjectParentReference) GetSchemaReference() *SchemaReference {
	if x != nil {
		return x.xxx_hidden_SchemaReference
	}
	return nil
}

func (x *CatalogObjectParentReference) GetObjectName() []*Identifier {
	if x != nil {
		if x.xxx_hidden_ObjectName != nil {
			return *x.xxx_hidden_ObjectName
		}
	}
	return nil
}

func (x *CatalogObjectParentReference) SetSchemaReference(v *SchemaReference) {
	x.xxx_hidden_SchemaReference = v
}

func (x *CatalogObjectParentReference) SetObjectName(v []*Identifier) {
	x.xxx_hidden_ObjectName = &v
}

func (x *CatalogObjectParentReference) HasSchemaReference() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SchemaReference != nil
}

func (x *CatalogObjectParentReference) ClearSchemaReference() {
	x.xxx_hidden_SchemaReference = nil
}

type CatalogObjectParentReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SchemaReference *SchemaReference
	ObjectName      []*Identifier
}

func (b0 CatalogObjectParentReference_builder) Build() *CatalogObjectParentReference {
	m0 := &CatalogObjectParentReference{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SchemaReference = b.SchemaReference
	x.xxx_hidden_ObjectName = &b.ObjectName
	return m0
}

type SchemaReference struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type isSchemaReference_Type `protobuf_oneof:"type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SchemaReference) Reset() {
	*x = SchemaReference{}
	mi := &file_catalog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaReference) ProtoMessage() {}

func (x *SchemaReference) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SchemaReference) GetAbsoluteCatalogPath() *AbsoluteCatalogPath {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*schemaReference_AbsoluteCatalogPath); ok {
			return x.AbsoluteCatalogPath
		}
	}
	return nil
}

func (x *SchemaReference) GetRelativeCatalogPath() *RelativeCatalogPath {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*schemaReference_RelativeCatalogPath); ok {
			return x.RelativeCatalogPath
		}
	}
	return nil
}

func (x *SchemaReference) GetReferenceParameterSpecification() *ReferenceParameterSpecification {
	if x != nil {
		if x, ok := x.xxx_hidden_Type.(*schemaReference_ReferenceParameterSpecification); ok {
			return x.ReferenceParameterSpecification
		}
	}
	return nil
}

func (x *SchemaReference) SetAbsoluteCatalogPath(v *AbsoluteCatalogPath) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &schemaReference_AbsoluteCatalogPath{v}
}

func (x *SchemaReference) SetRelativeCatalogPath(v *RelativeCatalogPath) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &schemaReference_RelativeCatalogPath{v}
}

func (x *SchemaReference) SetReferenceParameterSpecification(v *ReferenceParameterSpecification) {
	if v == nil {
		x.xxx_hidden_Type = nil
		return
	}
	x.xxx_hidden_Type = &schemaReference_ReferenceParameterSpecification{v}
}

func (x *SchemaReference) HasType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Type != nil
}

func (x *SchemaReference) HasAbsoluteCatalogPath() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*schemaReference_AbsoluteCatalogPath)
	return ok
}

func (x *SchemaReference) HasRelativeCatalogPath() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*schemaReference_RelativeCatalogPath)
	return ok
}

func (x *SchemaReference) HasReferenceParameterSpecification() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Type.(*schemaReference_ReferenceParameterSpecification)
	return ok
}

func (x *SchemaReference) ClearType() {
	x.xxx_hidden_Type = nil
}

func (x *SchemaReference) ClearAbsoluteCatalogPath() {
	if _, ok := x.xxx_hidden_Type.(*schemaReference_AbsoluteCatalogPath); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *SchemaReference) ClearRelativeCatalogPath() {
	if _, ok := x.xxx_hidden_Type.(*schemaReference_RelativeCatalogPath); ok {
		x.xxx_hidden_Type = nil
	}
}

func (x *SchemaReference) ClearReferenceParameterSpecification() {
	if _, ok := x.xxx_hidden_Type.(*schemaReference_ReferenceParameterSpecification); ok {
		x.xxx_hidden_Type = nil
	}
}

const SchemaReference_Type_not_set_case case_SchemaReference_Type = 0
const SchemaReference_AbsoluteCatalogPath_case case_SchemaReference_Type = 1
const SchemaReference_RelativeCatalogPath_case case_SchemaReference_Type = 2
const SchemaReference_ReferenceParameterSpecification_case case_SchemaReference_Type = 3

func (x *SchemaReference) WhichType() case_SchemaReference_Type {
	if x == nil {
		return SchemaReference_Type_not_set_case
	}
	switch x.xxx_hidden_Type.(type) {
	case *schemaReference_AbsoluteCatalogPath:
		return SchemaReference_AbsoluteCatalogPath_case
	case *schemaReference_RelativeCatalogPath:
		return SchemaReference_RelativeCatalogPath_case
	case *schemaReference_ReferenceParameterSpecification:
		return SchemaReference_ReferenceParameterSpecification_case
	default:
		return SchemaReference_Type_not_set_case
	}
}

type SchemaReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Type:
	AbsoluteCatalogPath             *AbsoluteCatalogPath
	RelativeCatalogPath             *RelativeCatalogPath
	ReferenceParameterSpecification *ReferenceParameterSpecification
	// -- end of xxx_hidden_Type
}

func (b0 SchemaReference_builder) Build() *SchemaReference {
	m0 := &SchemaReference{}
	b, x := &b0, m0
	_, _ = b, x
	if b.AbsoluteCatalogPath != nil {
		x.xxx_hidden_Type = &schemaReference_AbsoluteCatalogPath{b.AbsoluteCatalogPath}
	}
	if b.RelativeCatalogPath != nil {
		x.xxx_hidden_Type = &schemaReference_RelativeCatalogPath{b.RelativeCatalogPath}
	}
	if b.ReferenceParameterSpecification != nil {
		x.xxx_hidden_Type = &schemaReference_ReferenceParameterSpecification{b.ReferenceParameterSpecification}
	}
	return m0
}

type case_SchemaReference_Type protoreflect.FieldNumber

func (x case_SchemaReference_Type) String() string {
	md := file_catalog_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSchemaReference_Type interface {
	isSchemaReference_Type()
}

type schemaReference_AbsoluteCatalogPath struct {
	AbsoluteCatalogPath *AbsoluteCatalogPath `protobuf:"bytes,1,opt,name=absolute_catalog_path,json=absoluteCatalogPath,oneof"`
}

type schemaReference_RelativeCatalogPath struct {
	RelativeCatalogPath *RelativeCatalogPath `protobuf:"bytes,2,opt,name=relative_catalog_path,json=relativeCatalogPath,oneof"`
}

type schemaReference_ReferenceParameterSpecification struct {
	ReferenceParameterSpecification *ReferenceParameterSpecification `protobuf:"bytes,3,opt,name=reference_parameter_specification,json=referenceParameterSpecification,oneof"`
}

func (*schemaReference_AbsoluteCatalogPath) isSchemaReference_Type() {}

func (*schemaReference_RelativeCatalogPath) isSchemaReference_Type() {}

func (*schemaReference_ReferenceParameterSpecification) isSchemaReference_Type() {}

type AbsoluteCatalogPath struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value string                 `protobuf:"bytes,1,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AbsoluteCatalogPath) Reset() {
	*x = AbsoluteCatalogPath{}
	mi := &file_catalog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsoluteCatalogPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteCatalogPath) ProtoMessage() {}

func (x *AbsoluteCatalogPath) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AbsoluteCatalogPath) GetValue() string {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return ""
}

func (x *AbsoluteCatalogPath) SetValue(v string) {
	x.xxx_hidden_Value = v
}

type AbsoluteCatalogPath_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Value string
}

func (b0 AbsoluteCatalogPath_builder) Build() *AbsoluteCatalogPath {
	m0 := &AbsoluteCatalogPath{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Value = b.Value
	return m0
}

type RelativeCatalogPath struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value string                 `protobuf:"bytes,1,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RelativeCatalogPath) Reset() {
	*x = RelativeCatalogPath{}
	mi := &file_catalog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelativeCatalogPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeCatalogPath) ProtoMessage() {}

func (x *RelativeCatalogPath) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RelativeCatalogPath) GetValue() string {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return ""
}

func (x *RelativeCatalogPath) SetValue(v string) {
	x.xxx_hidden_Value = v
}

type RelativeCatalogPath_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Value string
}

func (b0 RelativeCatalogPath_builder) Build() *RelativeCatalogPath {
	m0 := &RelativeCatalogPath{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Value = b.Value
	return m0
}

var File_catalog_proto protoreflect.FileDescriptor

var file_catalog_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x73, 0x74, 0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x02,
	0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x13, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x72, 0x0a, 0x21, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a,
	0x13, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x35, 0x0a, 0x18, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x42, 0x10,
	0x5a, 0x04, 0x2f, 0x61, 0x73, 0x74, 0x92, 0x03, 0x07, 0xd2, 0x3e, 0x02, 0x10, 0x03, 0x08, 0x02,
	0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_catalog_proto_goTypes = []any{
	(CatalogParentAndNameType)(0),           // 0: ast.CatalogParentAndNameType
	(*CatalogParentAndName)(nil),            // 1: ast.CatalogParentAndName
	(*CatalogObjectParentReference)(nil),    // 2: ast.CatalogObjectParentReference
	(*SchemaReference)(nil),                 // 3: ast.SchemaReference
	(*AbsoluteCatalogPath)(nil),             // 4: ast.AbsoluteCatalogPath
	(*RelativeCatalogPath)(nil),             // 5: ast.RelativeCatalogPath
	(*Identifier)(nil),                      // 6: ast.Identifier
	(*ReferenceParameterSpecification)(nil), // 7: ast.ReferenceParameterSpecification
}
var file_catalog_proto_depIdxs = []int32{
	0, // 0: ast.CatalogParentAndName.type:type_name -> ast.CatalogParentAndNameType
	2, // 1: ast.CatalogParentAndName.parent:type_name -> ast.CatalogObjectParentReference
	6, // 2: ast.CatalogParentAndName.name:type_name -> ast.Identifier
	3, // 3: ast.CatalogObjectParentReference.schemaReference:type_name -> ast.SchemaReference
	6, // 4: ast.CatalogObjectParentReference.object_name:type_name -> ast.Identifier
	4, // 5: ast.SchemaReference.absolute_catalog_path:type_name -> ast.AbsoluteCatalogPath
	5, // 6: ast.SchemaReference.relative_catalog_path:type_name -> ast.RelativeCatalogPath
	7, // 7: ast.SchemaReference.reference_parameter_specification:type_name -> ast.ReferenceParameterSpecification
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_catalog_proto_init() }
func file_catalog_proto_init() {
	if File_catalog_proto != nil {
		return
	}
	file_literals_proto_init()
	file_catalog_proto_msgTypes[2].OneofWrappers = []any{
		(*schemaReference_AbsoluteCatalogPath)(nil),
		(*schemaReference_RelativeCatalogPath)(nil),
		(*schemaReference_ReferenceParameterSpecification)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_catalog_proto_rawDesc), len(file_catalog_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_catalog_proto_goTypes,
		DependencyIndexes: file_catalog_proto_depIdxs,
		EnumInfos:         file_catalog_proto_enumTypes,
		MessageInfos:      file_catalog_proto_msgTypes,
	}.Build()
	File_catalog_proto = out.File
	file_catalog_proto_goTypes = nil
	file_catalog_proto_depIdxs = nil
}
